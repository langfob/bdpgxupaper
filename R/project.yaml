#===============================================================================

project_name: TestGen6basicVariants
runner_class: RRunner

#===============================================================================

base_params:

    full_output_dir_with_slash: $$output_path$$

        #---------------------------------
        #  Run identification parameters
        #---------------------------------

    runset_name:   $$runset$$
    runset_abbrev: "Test_gen_6"
    run_id:        $$run_id$$

        #----------------------------------------
        #  Problem variants selector parameters
        #----------------------------------------

    gen_6_basic_variants: TRUE

        #--------------------------
        #  Error model parameters
        #--------------------------

    use_unif_rand_err_amt: TRUE
    err_amt_lower_bound: 0
    err_amt_upper_bound: 0.10

        #-------------------------------
        #  Reserve selector parameters
        #-------------------------------

    do_simple_richness_forward: TRUE

        #-----------------------------
        #  Network metric parameters
        #-----------------------------

    compute_network_metrics: FALSE    #  FALSE overrides all other network flags below

    compute_network_metrics_base_COR: TRUE
    compute_network_metrics_base_APP: TRUE
    compute_network_metrics_wrapped_COR: TRUE
    compute_network_metrics_wrapped_APP: TRUE

    use_igraph_metrics:    TRUE

    use_bipartite_metrics: TRUE
    bipartite_metrics_to_use: "all_except_slow_indices"    #  "quick_test"    #  "ALLBUTDD"

        #---------------------------------
        #  Xu problem control parameters
        #---------------------------------

    n__num_groups: 80
    alpha__: 1.5
    p__prop_of_links_between_groups: 1
    r__density: 5

##                n__num_groups: 5
##                alpha__: 0.8
##                p__prop_of_links_between_groups: 0.5
##                r__density: 0.5

#    derive_alpha_from_n__num_groups_and_opt_frac_0.5: FALSE
#    use_unif_rand_alpha__: FALSE
#    alpha__: 0.52

#    use_unif_rand_n__num_groups: TRUE
#    n__num_groups_lower_bound: 61
#    n__num_groups_upper_bound: 62
#    #            n__num_groups_upper_bound: 80

#    #            use_unif_rand_n__num_groups: TRUE
#    #            n__num_groups_lower_bound: 8
#    #            n__num_groups_upper_bound: 100

#    use_unif_rand_r__density: FALSE
#    r__density: 0.8
#    #            use_unif_rand_r__density: TRUE
#    #            r__density_lower_bound: 0.01
#    #            r__density_upper_bound: 5.0

#    use_unif_rand_p__prop_of_links_between_groups: TRUE
#    p__prop_of_links_between_groups_lower_bound: 0.01
#    p__prop_of_links_between_groups_upper_bound: 0.99

        #-------------------------------
        #  Problem wrapping parameters
        #-------------------------------

    wrap_lognormal_dist_around_Xu: TRUE
    allow_imperfect_wrap: TRUE
    desired_Xu_spp_frac_of_all_spp: 0.5
    solution_frac_of_landscape: 0.3
    desired_max_abundance_frac: 0.7
    dep_set_PUs_eligible: FALSE
    add_one_to_lognormal_abundances: FALSE
    max_search_iterations: 500
    plot_rounded_abundances: TRUE

    #---------------------------------------------------------------------------

repetitions:
    generators:
        - key: cur_run_idx
          generator_type: linear_step
          start: 1
          step_size: 1
          count: 1

    #---------------------------------------------------------------------------


#===============================================================================


